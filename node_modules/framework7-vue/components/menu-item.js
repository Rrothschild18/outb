import { toDisplayString as _toDisplayString, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, renderSlot as _renderSlot, createTextVNode as _createTextVNode, createElementBlock as _createElementBlock, resolveDynamicComponent as _resolveDynamicComponent, mergeProps as _mergeProps, withCtx as _withCtx } from "vue";
const _hoisted_1 = {
  key: 0,
  class: "menu-item-content"
};

function render(_ctx, _cache) {
  const _component_f7_use_icon = _resolveComponent("f7-use-icon");

  return _openBlock(), _createBlock(_resolveDynamicComponent(_ctx.tag), _mergeProps({
    ref: "elRef",
    class: _ctx.classes
  }, _ctx.attrs, {
    onClick: _ctx.onClick
  }), {
    default: _withCtx(() => [_ctx.text || _ctx.$slots.text || _ctx.icon ? (_openBlock(), _createElementBlock("div", _hoisted_1, [_createTextVNode(_toDisplayString(_ctx.text) + " ", 1), _ctx.icon ? (_openBlock(), _createBlock(_component_f7_use_icon, {
      key: 0,
      icon: _ctx.icon
    }, null, 8, ["icon"])) : _createCommentVNode("", true), _renderSlot(_ctx.$slots, "text")])) : _createCommentVNode("", true), _renderSlot(_ctx.$slots, "default")]),
    _: 3
  }, 16, ["class", "onClick"]);
}

import { ref, computed, onMounted, onBeforeUnmount } from 'vue';
import { classNames } from '../shared/utils.js';
import { colorClasses, colorProps, routerProps, routerAttrs, routerClasses, actionsProps, actionsClasses, actionsAttrs, iconProps } from '../shared/mixins.js';
import { useRouteProps } from '../shared/use-route-props.js';
import { useIcon } from '../shared/use-icon.js';
import { f7ready, f7 } from '../shared/f7.js';
import { useTooltip } from '../shared/use-tooltip.js';
import f7UseIcon from './use-icon.js';
export default {
  name: 'f7-menu-item',
  render,
  components: {
    f7UseIcon
  },
  props: {
    text: String,
    iconOnly: Boolean,
    href: String,
    link: Boolean,
    target: String,
    dropdown: Boolean,
    tooltip: String,
    tooltipTrigger: String,
    ...colorProps,
    ...routerProps,
    ...actionsProps,
    ...iconProps
  },
  emits: ['click', 'menu:opened', 'menu:closed'],

  setup(props, _ref) {
    let {
      slots,
      emit
    } = _ref;
    const elRef = ref(null);
    useTooltip(elRef, props);

    const onClick = e => {
      emit('click', e);
    };

    const onOpened = el => {
      if (elRef.value !== el) return;
      emit('menu:opened', el);
    };

    const onClosed = el => {
      if (elRef.value !== el) return;
      emit('menu:closed', el);
    };

    useRouteProps(elRef, props);

    const attachEvents = () => {
      f7ready(() => {
        f7.on('menuOpened', onOpened);
        f7.on('menuClosed', onClosed);
      });
    };

    const detachEvents = () => {
      f7.off('menuOpened', onOpened);
      f7.off('menuClosed', onOpened);
    };

    onMounted(() => attachEvents());
    onBeforeUnmount(() => detachEvents());
    const icon = computed(() => useIcon(props));
    const tag = computed(() => {
      const isLink = props.link || props.href || props.href === '';
      return isLink ? 'a' : 'div';
    });
    const classes = computed(() => {
      let iconOnlyComputed;

      if (props.iconOnly || !props.text && !slots.text) {
        iconOnlyComputed = true;
      } else {
        iconOnlyComputed = false;
      }

      const isDropdown = props.dropdown || props.dropdown === '';
      return classNames({
        'menu-item': true,
        'menu-item-dropdown': isDropdown,
        'icon-only': iconOnlyComputed
      }, colorClasses(props), routerClasses(props), actionsClasses(props));
    });
    const attrs = computed(() => {
      let hrefComputed = props.href;
      if (typeof hrefComputed === 'undefined' && props.link) hrefComputed = '#';
      return {
        href: hrefComputed,
        target: props.target,
        ...routerAttrs(props),
        ...actionsAttrs(props)
      };
    });
    return {
      tag,
      classes,
      attrs,
      icon,
      onClick,
      elRef
    };
  }

};