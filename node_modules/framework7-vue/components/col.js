import { renderSlot as _renderSlot, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, resolveDynamicComponent as _resolveDynamicComponent, normalizeClass as _normalizeClass, withCtx as _withCtx, createBlock as _createBlock } from "vue";
const _hoisted_1 = {
  key: 0,
  class: "resize-handler"
};

function render(_ctx, _cache) {
  return _openBlock(), _createBlock(_resolveDynamicComponent(_ctx.tag), {
    ref: "elRef",
    class: _normalizeClass(_ctx.classes)
  }, {
    default: _withCtx(() => [_renderSlot(_ctx.$slots, "default"), _ctx.resizable && _ctx.resizableHandler ? (_openBlock(), _createElementBlock("span", _hoisted_1)) : _createCommentVNode("", true)]),
    _: 3
  }, 8, ["class"]);
}

import { ref, computed, onBeforeUnmount, onMounted } from 'vue';
import { classNames } from '../shared/utils.js';
import { colorClasses, colorProps } from '../shared/mixins.js';
import { f7ready, f7 } from '../shared/f7.js';
export default {
  name: 'f7-col',
  render,
  props: {
    tag: {
      type: String,
      default: 'div'
    },
    width: {
      type: [Number, String],
      default: 'auto'
    },
    xsmall: {
      type: [Number, String]
    },
    small: {
      type: [Number, String]
    },
    medium: {
      type: [Number, String]
    },
    large: {
      type: [Number, String]
    },
    xlarge: {
      type: [Number, String]
    },
    resizable: Boolean,
    resizableFixed: Boolean,
    resizableAbsolute: Boolean,
    resizableHandler: {
      type: Boolean,
      default: true
    },
    ...colorProps
  },
  emits: ['grid:resize'],

  setup(props, _ref) {
    let {
      emit
    } = _ref;
    const elRef = ref(null);

    const onResize = el => {
      if (el === elRef.value) {
        emit('grid:resize');
      }
    };

    onMounted(() => {
      f7ready(() => {
        f7.on('gridResize', onResize);
      });
    });
    onBeforeUnmount(() => {
      f7.off('gridResize', onResize);
    });
    const classes = computed(() => classNames({
      col: props.width === 'auto',
      [`col-${props.width}`]: props.width !== 'auto',
      [`xsmall-${props.xsmall}`]: props.xsmall,
      [`small-${props.small}`]: props.small,
      [`medium-${props.medium}`]: props.medium,
      [`large-${props.large}`]: props.large,
      [`xlarge-${props.xlarge}`]: props.xlarge,
      resizable: props.resizable,
      'resizable-fixed': props.resizableFixed,
      'resizable-absolute': props.resizableAbsolute
    }, colorClasses(props)));
    return {
      classes,
      elRef
    };
  }

};