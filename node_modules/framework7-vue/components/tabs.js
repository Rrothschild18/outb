import { renderSlot as _renderSlot, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from "vue";

function render(_ctx, _cache) {
  return _ctx.animated || _ctx.swipeable ? (_openBlock(), _createElementBlock("div", {
    key: 0,
    ref: "elRef",
    class: _normalizeClass(_ctx.classNames(_ctx.wrapClasses, _ctx.classes))
  }, [_createElementVNode("div", {
    class: _normalizeClass(_ctx.tabsClasses)
  }, [_renderSlot(_ctx.$slots, "default")], 2)], 2)) : (_openBlock(), _createElementBlock("div", {
    key: 1,
    ref: "elRef",
    class: _normalizeClass(_ctx.classNames(_ctx.tabsClasses, _ctx.classes))
  }, [_renderSlot(_ctx.$slots, "default")], 2));
}

import { computed, ref, onMounted } from 'vue';
import { classNames } from '../shared/utils.js';
import { colorClasses, colorProps } from '../shared/mixins.js';
export default {
  name: 'f7-tabs',
  render,
  props: {
    animated: Boolean,
    swipeable: Boolean,
    routable: Boolean,
    swiperParams: {
      type: Object,
      default: undefined
    },
    ...colorProps
  },

  setup(props) {
    const elRef = ref(null);
    onMounted(() => {
      if (!props.swipeable || !props.swiperParams) return;
      if (!elRef.value) return;
      elRef.value.f7SwiperParams = props.swiperParams;
    });
    const classes = computed(() => classNames(colorClasses(props)));
    const wrapClasses = computed(() => classNames({
      'tabs-animated-wrap': props.animated,
      'tabs-swipeable-wrap': props.swipeable
    }));
    const tabsClasses = computed(() => classNames({
      tabs: true,
      'tabs-routable': props.routable
    }));
    return {
      elRef,
      classes,
      wrapClasses,
      tabsClasses,
      classNames
    };
  }

};