import { toDisplayString as _toDisplayString, renderSlot as _renderSlot, createTextVNode as _createTextVNode, mergeProps as _mergeProps, openBlock as _openBlock, createElementBlock as _createElementBlock } from "vue";

function render(_ctx, _cache) {
  return _openBlock(), _createElementBlock("div", _mergeProps({
    ref: "elRef",
    class: _ctx.classes
  }, _ctx.attrs, {
    onClick: _cache[0] || (_cache[0] = function () {
      return _ctx.onClick && _ctx.onClick(...arguments);
    })
  }), [_createTextVNode(_toDisplayString(_ctx.text) + " ", 1), _renderSlot(_ctx.$slots, "default")], 16);
}

import { computed, ref } from 'vue';
import { classNames } from '../shared/utils.js';
import { colorClasses, colorProps, routerProps, routerAttrs, routerClasses, actionsProps, actionsAttrs, actionsClasses } from '../shared/mixins.js';
import { useRouteProps } from '../shared/use-route-props.js';
export default {
  name: 'f7-menu-dropdown-item',
  render,
  props: {
    text: String,
    link: Boolean,
    href: String,
    target: String,
    divider: Boolean,
    ...colorProps,
    ...routerProps,
    ...actionsProps
  },
  emits: ['click'],

  setup(props, _ref) {
    let {
      emit
    } = _ref;
    const elRef = ref(null);

    const onClick = e => {
      emit('click', e);
    };

    useRouteProps(elRef, props);
    const isLink = computed(() => props.link || props.href || props.href === '');
    const tag = computed(() => isLink.value ? 'a' : 'div');
    const classes = computed(() => {
      return classNames({
        'menu-dropdown-link': isLink.value && !props.divider,
        'menu-dropdown-item': !isLink.value && !props.divider,
        'menu-dropdown-divider': props.divider
      }, colorClasses(props), routerClasses(props), actionsClasses(props), {
        'menu-close': typeof props.menuClose === 'undefined'
      });
    });
    const attrs = computed(() => {
      let hrefComputed = props.href;
      if (typeof hrefComputed === 'undefined' && props.link) hrefComputed = '#';
      return {
        href: hrefComputed,
        target: props.target,
        ...routerAttrs(props),
        ...actionsAttrs(props)
      };
    });
    return {
      classes,
      attrs,
      tag,
      onClick,
      elRef
    };
  }

};